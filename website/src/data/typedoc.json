{
  "id": 0,
  "name": "tings",
  "variant": "project",
  "kind": 1,
  "flags": {},
  "children": [
    {
      "id": 1,
      "name": "check-browser",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 2,
          "name": "checkBrowser",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 3,
              "name": "checkBrowser",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if current code is running in a browser environment."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkBrowser } from 'tings'\n\ncheckBrowser() // true\n```"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [2]
        }
      ],
      "categories": [
        {
          "title": "Environment",
          "children": [2]
        }
      ]
    },
    {
      "id": 4,
      "name": "check-compact-case",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 5,
          "name": "checkCompactCase",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 6,
              "name": "checkCompactCase",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if input is a string that does not contain white-spaces."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkCompactCase } from 'tings'\n\ncheckCompactCase('thisiscompact') // true\ncheckCompactCase('this is not compact') // false\ncheckCompactCase(123) // false - input is not a string\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 7,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "input",
                "asserts": false,
                "targetType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [5]
        }
      ],
      "categories": [
        {
          "title": "String",
          "children": [5]
        }
      ]
    },
    {
      "id": 8,
      "name": "check-date",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 9,
          "name": "checkDate",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 10,
              "name": "checkDate",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if input is a valid Date."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkDate } from 'tings'\n\ncheckDate(new Date()) // true\ncheckDate(\"not a date\") // false\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 11,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "input",
                "asserts": false,
                "targetType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "Date"
                  },
                  "name": "Date",
                  "package": "typescript"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [9]
        }
      ],
      "categories": [
        {
          "title": "Date",
          "children": [9]
        }
      ]
    },
    {
      "id": 12,
      "name": "check-even",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 13,
          "name": "checkEven",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 14,
              "name": "checkEven",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if input is an even integer."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkEven } from 'tings'\n\ncheckEven(-4)   // true\ncheckEven(-1)   // false\ncheckEven(0)    // true\ncheckEven(1)    // false\ncheckEven(2)    // true\ncheckEven(5)    // false\ncheckEven(9)    // false\ncheckEven(3.14) // false\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 15,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "input",
                "asserts": false,
                "targetType": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [13]
        }
      ],
      "categories": [
        {
          "title": "Number",
          "children": [13]
        }
      ]
    },
    {
      "id": 16,
      "name": "check-lower-case",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 17,
          "name": "checkLowerCase",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 18,
              "name": "checkLowerCase",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if input is a string containing no UPPERcase characters."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkLowerCase } from 'tings'\n\ncheckLowerCase('this is lower') // true\ncheckLowerCase('This is not LOWER') // false\ncheckLowerCase(123) // false - input is not a string\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 19,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "input",
                "asserts": false,
                "targetType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [17]
        }
      ],
      "categories": [
        {
          "title": "String",
          "children": [17]
        }
      ]
    },
    {
      "id": 20,
      "name": "check-odd",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 21,
          "name": "checkOdd",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 22,
              "name": "checkOdd",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if input is an odd integer."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkOdd } from 'tings'\n\ncheckOdd(-4)   // false\ncheckOdd(-1)   // true\ncheckOdd(0)    // false\ncheckOdd(1)    // true\ncheckOdd(2)    // false\ncheckOdd(5)    // true\ncheckOdd(9)    // true\ncheckOdd(3.14) // false\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 23,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "input",
                "asserts": false,
                "targetType": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [21]
        }
      ],
      "categories": [
        {
          "title": "Number",
          "children": [21]
        }
      ]
    },
    {
      "id": 24,
      "name": "check-prime",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 25,
          "name": "checkPrime",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 26,
              "name": "checkPrime",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if input is a prime number."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkPrime } from 'tings'\n\ncheckPrime(0)    // false\ncheckPrime(1)    // false\ncheckPrime(2)    // true\ncheckPrime(5)    // true\ncheckPrime(9)    // false\ncheckPrime(3.14) // false\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 27,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "input",
                "asserts": false,
                "targetType": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [25]
        }
      ],
      "categories": [
        {
          "title": "Number",
          "children": [25]
        }
      ]
    },
    {
      "id": 28,
      "name": "check-unique",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 29,
          "name": "checkUnique",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 30,
              "name": "checkUnique",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if an array only contains unique items.\nWill return true for any input that's not an array."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkUnique } from 'tings'\n\ncheckUnique([1, 2, 3]) // true\ncheckUnique([1, 1, 2]) // false\ncheckUnique('not array') // true\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 31,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [29]
        }
      ],
      "categories": [
        {
          "title": "Array",
          "children": [29]
        }
      ]
    },
    {
      "id": 32,
      "name": "check-url-absolute",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 33,
          "name": "checkUrlAbsolute",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 34,
              "name": "checkUrlAbsolute",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Determines if a URL string is absolute by seeing if it starts with a protocol.\nWill return false for any input that's not a string."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { checkUrlAbsolute } from 'tings'\n\ncheckUrlAbsolute(\"http://example.com/page\") // true\ncheckUrlAbsolute(\"/page\") // false\ncheckUrlAbsolute(123) // false - input is not a string\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 35,
                  "name": "url",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [33]
        }
      ],
      "categories": [
        {
          "title": "String",
          "children": [33]
        }
      ]
    },
    {
      "id": 36,
      "name": "generate-integers",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 37,
          "name": "generateIntegers",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 38,
              "name": "generateIntegers",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Generate an array of integers from a given number to another."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { generateIntegers } from 'tings'\n\ngenerateIntegers(1, 6) // [1, 2, 3, 4, 5, 6]\ngenerateIntegers(\"abc\", 6) // [] - at least one input is not a number\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 39,
                  "name": "from",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                },
                {
                  "id": 40,
                  "name": "to",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [37]
        }
      ],
      "categories": [
        {
          "title": "Array",
          "children": [37]
        }
      ]
    },
    {
      "id": 42,
      "name": "sleep",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 43,
          "name": "sleep",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 44,
              "name": "sleep",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Pauses the current function."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { sleep } from 'tings'\n\nawait sleep(2000) // sleeps for 2 seconds\nawait sleep(\"abc\") // sleeps for 0 seconds as input is not a number\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 45,
                  "name": "milliseconds",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Promise"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "void"
                  }
                ],
                "name": "Promise",
                "package": "typescript"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [43]
        }
      ],
      "categories": [
        {
          "title": "Misc",
          "children": [43]
        }
      ]
    },
    {
      "id": 46,
      "name": "to-compact-case",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 47,
          "name": "toCompactCase",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 48,
              "name": "toCompactCase",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Removes all whitespace characters from a string."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { toCompactCase } from 'tings'\n\ntoCompactCase('this is text') // thisistext\ntoCompactCase('someTEXT') // someTEXT\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 49,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [47]
        }
      ],
      "categories": [
        {
          "title": "String",
          "children": [47]
        }
      ]
    },
    {
      "id": 50,
      "name": "to-letters",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 51,
          "name": "toLetters",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 52,
              "name": "toLetters",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Removes all non-alphabetical characters from a string."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { toLetters } from 'tings'\n\ntoLetters('this is text') // thisistext\ntoLetters('123-Text!!!') // Text\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 53,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [51]
        }
      ],
      "categories": [
        {
          "title": "String",
          "children": [51]
        }
      ]
    },
    {
      "id": 54,
      "name": "to-number",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 55,
          "name": "toNumber",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 56,
              "name": "toNumber",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Will return the given input as a number, if it cannot be converted, it will return 0."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { toNumber } from 'tings'\n\ntoNumber('this is text') // 0\ntoNumber('3') // 3\ntoNumber(0.4) // 0.4\ntoNumber(new Set([])) // 0\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 57,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [55]
        }
      ],
      "categories": [
        {
          "title": "Number",
          "children": [55]
        }
      ]
    },
    {
      "id": 58,
      "name": "to-ordinal",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 59,
          "name": "toOrdinal",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "signatures": [
            {
              "id": 60,
              "name": "toOrdinal",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Converts a number to its ordinal string form, if possible, else returns 0th.\n- 1 -> 1st\n- 4.2 -> 4.2th\n- notANumber -> 0th"
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\nimport { toOrdinal } from 'tings'\n\ntoOrdinal('this is text') // 0th\ntoOrdinal('3') // 3rd\ntoOrdinal('11') // 11th\ntoOrdinal(3.14) // 3.14th\n```"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 61,
                  "name": "input",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "unknown"
                  },
                  "defaultValue": "0"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [59]
        }
      ],
      "categories": [
        {
          "title": "Number",
          "children": [59]
        }
      ]
    }
  ],
  "groups": [
    {
      "title": "Modules",
      "children": [1, 4, 8, 12, 16, 20, 24, 28, 32, 36, 42, 46, 50, 54, 58]
    }
  ],
  "packageName": "tings",
  "symbolIdMap": {
    "1": {
      "sourceFileName": "source/check-browser.ts",
      "qualifiedName": ""
    },
    "2": {
      "sourceFileName": "source/check-browser.ts",
      "qualifiedName": "checkBrowser"
    },
    "3": {
      "sourceFileName": "source/check-browser.ts",
      "qualifiedName": "checkBrowser"
    },
    "4": {
      "sourceFileName": "source/check-compact-case.ts",
      "qualifiedName": ""
    },
    "5": {
      "sourceFileName": "source/check-compact-case.ts",
      "qualifiedName": "checkCompactCase"
    },
    "6": {
      "sourceFileName": "source/check-compact-case.ts",
      "qualifiedName": "checkCompactCase"
    },
    "7": {
      "sourceFileName": "source/check-compact-case.ts",
      "qualifiedName": "input"
    },
    "8": {
      "sourceFileName": "source/check-date.ts",
      "qualifiedName": ""
    },
    "9": {
      "sourceFileName": "source/check-date.ts",
      "qualifiedName": "checkDate"
    },
    "10": {
      "sourceFileName": "source/check-date.ts",
      "qualifiedName": "checkDate"
    },
    "11": {
      "sourceFileName": "source/check-date.ts",
      "qualifiedName": "input"
    },
    "12": {
      "sourceFileName": "source/check-even.ts",
      "qualifiedName": ""
    },
    "13": {
      "sourceFileName": "source/check-even.ts",
      "qualifiedName": "checkEven"
    },
    "14": {
      "sourceFileName": "source/check-even.ts",
      "qualifiedName": "checkEven"
    },
    "15": {
      "sourceFileName": "source/check-even.ts",
      "qualifiedName": "input"
    },
    "16": {
      "sourceFileName": "source/check-lower-case.ts",
      "qualifiedName": ""
    },
    "17": {
      "sourceFileName": "source/check-lower-case.ts",
      "qualifiedName": "checkLowerCase"
    },
    "18": {
      "sourceFileName": "source/check-lower-case.ts",
      "qualifiedName": "checkLowerCase"
    },
    "19": {
      "sourceFileName": "source/check-lower-case.ts",
      "qualifiedName": "input"
    },
    "20": {
      "sourceFileName": "source/check-odd.ts",
      "qualifiedName": ""
    },
    "21": {
      "sourceFileName": "source/check-odd.ts",
      "qualifiedName": "checkOdd"
    },
    "22": {
      "sourceFileName": "source/check-odd.ts",
      "qualifiedName": "checkOdd"
    },
    "23": {
      "sourceFileName": "source/check-odd.ts",
      "qualifiedName": "input"
    },
    "24": {
      "sourceFileName": "source/check-prime.ts",
      "qualifiedName": ""
    },
    "25": {
      "sourceFileName": "source/check-prime.ts",
      "qualifiedName": "checkPrime"
    },
    "26": {
      "sourceFileName": "source/check-prime.ts",
      "qualifiedName": "checkPrime"
    },
    "27": {
      "sourceFileName": "source/check-prime.ts",
      "qualifiedName": "input"
    },
    "28": {
      "sourceFileName": "source/check-unique.ts",
      "qualifiedName": ""
    },
    "29": {
      "sourceFileName": "source/check-unique.ts",
      "qualifiedName": "checkUnique"
    },
    "30": {
      "sourceFileName": "source/check-unique.ts",
      "qualifiedName": "checkUnique"
    },
    "31": {
      "sourceFileName": "source/check-unique.ts",
      "qualifiedName": "input"
    },
    "32": {
      "sourceFileName": "source/check-url-absolute.ts",
      "qualifiedName": ""
    },
    "33": {
      "sourceFileName": "source/check-url-absolute.ts",
      "qualifiedName": "checkUrlAbsolute"
    },
    "34": {
      "sourceFileName": "source/check-url-absolute.ts",
      "qualifiedName": "checkUrlAbsolute"
    },
    "35": {
      "sourceFileName": "source/check-url-absolute.ts",
      "qualifiedName": "url"
    },
    "36": {
      "sourceFileName": "source/generate-integers.ts",
      "qualifiedName": ""
    },
    "37": {
      "sourceFileName": "source/generate-integers.ts",
      "qualifiedName": "generateIntegers"
    },
    "38": {
      "sourceFileName": "source/generate-integers.ts",
      "qualifiedName": "generateIntegers"
    },
    "39": {
      "sourceFileName": "source/generate-integers.ts",
      "qualifiedName": "from"
    },
    "40": {
      "sourceFileName": "source/generate-integers.ts",
      "qualifiedName": "to"
    },
    "42": {
      "sourceFileName": "source/sleep.ts",
      "qualifiedName": ""
    },
    "43": {
      "sourceFileName": "source/sleep.ts",
      "qualifiedName": "sleep"
    },
    "44": {
      "sourceFileName": "source/sleep.ts",
      "qualifiedName": "sleep"
    },
    "45": {
      "sourceFileName": "source/sleep.ts",
      "qualifiedName": "milliseconds"
    },
    "46": {
      "sourceFileName": "source/to-compact-case.ts",
      "qualifiedName": ""
    },
    "47": {
      "sourceFileName": "source/to-compact-case.ts",
      "qualifiedName": "toCompactCase"
    },
    "48": {
      "sourceFileName": "source/to-compact-case.ts",
      "qualifiedName": "toCompactCase"
    },
    "49": {
      "sourceFileName": "source/to-compact-case.ts",
      "qualifiedName": "input"
    },
    "50": {
      "sourceFileName": "source/to-letters.ts",
      "qualifiedName": ""
    },
    "51": {
      "sourceFileName": "source/to-letters.ts",
      "qualifiedName": "toLetters"
    },
    "52": {
      "sourceFileName": "source/to-letters.ts",
      "qualifiedName": "toLetters"
    },
    "53": {
      "sourceFileName": "source/to-letters.ts",
      "qualifiedName": "input"
    },
    "54": {
      "sourceFileName": "source/to-number.ts",
      "qualifiedName": ""
    },
    "55": {
      "sourceFileName": "source/to-number.ts",
      "qualifiedName": "toNumber"
    },
    "56": {
      "sourceFileName": "source/to-number.ts",
      "qualifiedName": "toNumber"
    },
    "57": {
      "sourceFileName": "source/to-number.ts",
      "qualifiedName": "input"
    },
    "58": {
      "sourceFileName": "source/to-ordinal.ts",
      "qualifiedName": ""
    },
    "59": {
      "sourceFileName": "source/to-ordinal.ts",
      "qualifiedName": "toOrdinal"
    },
    "60": {
      "sourceFileName": "source/to-ordinal.ts",
      "qualifiedName": "toOrdinal"
    },
    "61": {
      "sourceFileName": "source/to-ordinal.ts",
      "qualifiedName": "input"
    }
  }
}
