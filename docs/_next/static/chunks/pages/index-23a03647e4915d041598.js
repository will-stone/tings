_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[7],{cMU6:function(e,t,n){"use strict";n.r(t),n.d(t,"config",(function(){return o}));var i=n("mXGw"),s=n.n(i),a=n("plik"),r=s.a.createElement,o={unstable_runtimeJS:!1};t.default=function(){return r("div",{className:"text-blue-400"},r("img",{alt:"tings",src:"/logo2.png"}),r("h1",null,a.name),a.children.map((function(e){return r("h2",{key:e.id},e.name)})))}},mJN6:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return n("cMU6")}])},plik:function(e){e.exports=JSON.parse('{"id":0,"name":"tings","kind":0,"flags":{},"originalName":"","children":[{"id":1,"name":"isCamelCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":2,"name":"isCamelCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Determines if input is a camelCase string.","tags":[{"tag":"requires","text":"lodash"},{"tag":"example","text":"\\n```ts\\nimport isCamelCase from \'tings/isCamelCase\'\\n\\nisCamelCase(\'camelCase\') // true\\nisCamelCase(\'NOTCamelCase\') // false\\n```\\n"}]},"parameters":[{"id":3,"name":"string","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":4,"name":"isCompactCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":5,"name":"isCompactCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Determines if input is a compactcase (no whitespaces) string.","tags":[{"tag":"example","text":"\\n```ts\\nimport isCompactCase from \'tings/isCompactCase\'\\n\\nisCompactCase(\'thisiscompact\') // true\\nisCompactCase(\'this is not compact\') // false\\n```\\n"}]},"parameters":[{"id":6,"name":"string","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":7,"name":"isLowerCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":8,"name":"isLowerCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Determines if input is a string containing no UPPERcase characters.","tags":[{"tag":"example","text":"\\n```ts\\nimport isLowerCase from \'tings/isLowerCase\'\\n\\nisLowerCase(\'this is lower\') // true\\nisLowerCase(\'This is not LOWER\') // false\\n```\\n"}]},"parameters":[{"id":9,"name":"string","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":13,"name":"isOccupied","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":14,"name":"isOccupied","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Similar to the opposite of Lodash\'s isEmpty this will return true if a value\\nis more than the minimum for its type. The main differences being:\\n- All numbers except `0` are occupied.\\n- All BigInts except `BigInt(0)` are occupied.\\n- Only `true` is occupied, not both booleans.\\n- All Symbols are occupied.","tags":[{"tag":"requires","text":"lodash"},{"tag":"example","text":"\\n```ts\\nimport isOccupied from \'tings/isOccupied\'\\n\\nisOccupied(\'\') // false\\nisOccupied(0) // false\\nisOccupied(BigInt(0)) // false\\nisOccupied([]) // false\\nisOccupied({}) // false\\nisOccupied(false) // false\\nisOccupied(null) // false\\nisOccupied(undefined) // false\\nisOccupied(new Map([])) // false\\n\\nisOccupied(1) // true\\nisOccupied(true) // true\\nisOccupied(\'a\') // true\\nisOccupied({ key: \'value\' }) // true\\n```\\n"}]},"parameters":[{"id":15,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":19,"name":"isPascalCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":20,"name":"isPascalCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Determines if input is a PascalCase string.","tags":[{"tag":"requires","text":"lodash"},{"tag":"example","text":"\\n```ts\\nimport isPascalCase from \'tings/isPascalCase\'\\n\\nisPascalCase(\'ThisIsPascal\') // true\\nisPascalCase(\'notPascal\') // false\\n```\\n"}]},"parameters":[{"id":21,"name":"string","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":27,"name":"isTitleCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":28,"name":"isTitleCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Determines if input is a Tile Case string.","tags":[{"tag":"requires","text":"lodash"},{"tag":"example","text":"\\n```ts\\nimport isTitleCase from \'tings/isTitleCase\'\\n\\nisTitleCase(\'this is text\') // false\\nisTitleCase(\'Small Words are not Capitalised\') // true\\n```\\n"}]},"parameters":[{"id":29,"name":"string","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":30,"name":"isUniq","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":31,"name":"isUniq","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Determines if an array only contains unique items.\\nWill return true for any input that\'s not an array.","tags":[{"tag":"example","text":"\\n```ts\\nimport isUniq from \'tings/isUniq\'\\n\\nisUniq([1, 2, 3]) // true\\nisUniq([1, 1, 2]) // false\\nisUniq(\'not array\') // true\\n```\\n"}]},"parameters":[{"id":32,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":10,"name":"isVacant","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":11,"name":"isVacant","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Similar to Lodash\'s isEmpty this will return true if a value is considered\\nthe minimum for its type. The main differences being:\\n- Only `0` is vacant, not all numbers.\\n- Only `BigInt(0)` is vacant, not all BigInts.\\n- Only `false` is vacant, not both booleans.\\n- Symbols are not vacant.","tags":[{"tag":"requires","text":"lodash"},{"tag":"example","text":"\\n```ts\\nimport isVacant from \'tings/isVacant\'\\n\\nisVacant(\'\') // true\\nisVacant(0) // true\\nisVacant(BigInt(0)) // true\\nisVacant([]) // true\\nisVacant({}) // true\\nisVacant(false) // true\\nisVacant(null) // true\\nisVacant(undefined) // true\\nisVacant(new Map([])) // true\\n\\nisVacant(1) // false\\nisVacant(true) // false\\nisVacant(\'a\') // false\\nisVacant({ key: \'value\' }) // false\\n```\\n"}]},"parameters":[{"id":12,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":36,"name":"sleep","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":37,"name":"sleep","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Pauses the current function.","tags":[{"tag":"example","text":"\\n```ts\\nimport sleep from \'tings/sleep\'\\n\\nawait sleep(2000) // sleeps for 2 seconds\\n```\\n"}]},"parameters":[{"id":38,"name":"milliseconds","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":39,"name":"toCompactCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":40,"name":"toCompactCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Removes all whitespace characters from a string.","tags":[{"tag":"example","text":"\\n```ts\\nimport toCompactCase from \'tings/toCompactCase\'\\n\\ntoCompactCase(\'this is text\') // thisistext\\ntoCompactCase(\'someTEXT\') // someTEXT\\n```\\n"}]},"parameters":[{"id":41,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":33,"name":"toNumberAlways","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":34,"name":"toNumberAlways","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Will return the given input as a number, if it cannot be converted, it will return 0.","tags":[{"tag":"example","text":"\\n```ts\\nimport toNumberAlways from \'tings/toNumberAlways\'\\n\\ntoNumberAlways(\'this is text\') // 0\\ntoNumberAlways(\'3\') // 3\\ntoNumberAlways(0.4) // 0.4\\ntoNumberAlways(new Set([])) // 0\\n```\\n"}]},"parameters":[{"id":35,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":42,"name":"toOrdinal","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":43,"name":"toOrdinal","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Converts a number to its ordinal string form, if possible, else returns 0th.\\n1 -> 1st\\n4.2 -> 4.2th\\nnotANumber -> 0th","tags":[{"tag":"example","text":"\\n```ts\\nimport toOrdinal from \'tings/toOrdinal\'\\n\\ntoOrdinal(\'this is text\') // 0th\\ntoOrdinal(\'3\') // 3rd\\ntoOrdinal(\'11\') // 11th\\n```\\n"}]},"parameters":[{"id":44,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"},"defaultValue":"0"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":16,"name":"toPascalCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":17,"name":"toPascalCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Converts input to PascalCase string.","tags":[{"tag":"requires","text":"lodash"},{"tag":"example","text":"\\n```ts\\nimport toPascalCase from \'tings/toPascalCase\'\\n\\ntoPascalCase(\'this is text\') // ThisIsText\\ntoPascalCase(\'someTEXT\') // SomeText\\n```\\n"}]},"parameters":[{"id":18,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":23,"name":"toTitleCase","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":24,"name":"toTitleCase","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Keep small words in lowercase, otherwise make the first letter uppercase.","tags":[{"tag":"requires","text":"lodash"},{"tag":"example","text":"\\n```ts\\nimport toTitleCase from \'tings/toTitleCase\'\\n\\ntoTitleCase(\'this is text\') // This is Text\\ntoTitleCase(\'smallWordsAreNotCapitalised\') // Small Words are not Capitalised\\n```\\n"}]},"parameters":[{"id":25,"name":"input","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"unknown"}},{"id":26,"name":"smallWords","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"englishSmallWords"}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[1,4,7,13,19,27,30,10,36,39,33,42,16,23]}]}')},x9yg:function(e,t,n){"use strict";var i=Object.assign.bind(Object);e.exports=i,e.exports.default=e.exports}},[["mJN6",0,1]]]);